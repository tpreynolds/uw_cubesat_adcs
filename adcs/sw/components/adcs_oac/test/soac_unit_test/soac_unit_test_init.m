% Unit test file for SOAC library
%
% problem parameters defined in init_SOAC, all parameters in soac_params.
% 
% this file tests the same scenario as the matlab demo in
% test/soac_matlab_demo for consistency. The plots generated should match
% the ones generated by both the CVX and ECOS tests in that folder.
%
% T. Reynolds -- RAIN Lab

N = 10; % number of discretization nodes
w_max = 0.1;
T_max = 2.3e-3;
Jw    = diag([2.9382e-5,2.9382e-5,2.9382e-5]);

% initial conditions
n   = [1;1;1]./norm([1;1;1]);
q0  = [ cosd(60/2); sind(60/2).*n ];
w0 = [ 0.0; 0.0; 0.0 ];
hw0 = Jw * 0.10471975511966 * [ 1000; 1000; 1000 ]; % rad/s

% final conditions
qf  = [ 1.0; 0.0; 0.0; 0.0 ];
wf  = [ 0.0; 0.0; 0.0 ];

% inertial sun vector
sI  = [ 1.0; 0.0; 0.0 ];

% Load sim and set run time
run_time    = 1;
mdl         = 'soac_unit_test';
load_system(mdl);
set_param(mdl,'StopTime', num2str(run_time));

% run test case
sim(mdl);

%% analyze results
num_sims = size(x_star,1);
xopt = x_star(end,:);
uopt = u_star(end,:);
sopt = s_star(end,:);
exitcode = exitcode(end,:);

total_time = zeros(num_sims,1);
for k = 1:num_sims
    total_time(k) = sum(sol_times(k,:));
end
mean_time       = mean(total_time);
std_time        = std(total_time);
max_time        = max(total_time);
threesig_time   = 3*std_time;
hertz           = 1/(mean_time+threesig_time);
fprintf('========================\n')
fprintf('SOAC UNIT TEST RESULTS:\n')
fprintf('========================\n')
fprintf('Over %d trials: \n',num_sims)
fprintf('The mean total solution time is: %0.5f +/- %0.5f sec \n',...
            mean_time,threesig_time)
fprintf('Able to call the function at: %0.2f Hz \n\n',hertz)


% Integrate through ODE
T       = linspace(0,sopt,100);
xopt    = reshape(full(xopt),10,N);
uopt    = reshape(full(uopt),3,N);
ut      = linspace(0,sopt,N);
P.method  = 'linear';
P.inertia = soac_params.inertia;

% integrate solution through nonlinear dynamics
X = rk4(@(t,y)Q_ode_p(P,t,y,uopt,ut),T,full(xopt(1:10)));

% Plot
close all
figure(1)
subplot(3,1,1), hold on, grid on
plot(T,X(:,1:4),'LineWidth',1)
plot(ut,xopt(1:4,:),'k*','MarkerSize',3)
set(gca,'Ylim',[-1 1])
xlabel('Time [s]','FontSize',16)
title('Attitude Quaternion','FontSize',18)
subplot(3,1,2), hold on, grid on
plot(T,P.inertia\X(:,5:7)','LineWidth',1)
plot(ut,P.inertia\xopt(5:7,:),'k*','MarkerSize',3)
plot([0 sopt],[w_max w_max],'r--','LineWidth',1)
plot([0 sopt],[-w_max -w_max],'r--','LineWidth',1)
xlabel('Time [s]','FontSize',16)
title('Angular Velocity','FontSize',18)
subplot(3,1,3), hold on, grid on
plot(T,X(:,8:10),'LineWidth',1)
plot(ut,xopt(8:10,:),'k*','MarkerSize',3)
xlabel('Time [s]','FontSize',16)
title('Wheel Momentum','FontSize',18)

figure(2), hold on, grid on
plot(ut,uopt,'LineWidth',1)
plot([0 sopt],[T_max T_max],'r--','LineWidth',1)
plot([0 sopt],[-T_max -T_max],'r--','LineWidth',1)
xlabel('Time [s]','FontSize',16)
title('Control Signal','FontSize',18)